const logger = require("../utils/logger")
const Payment = require("../models/payment");
const { sendEmail } = require("../utils/sendEmail");
const qs = require('qs');
const crypto = require('crypto');
const moment = require('moment');
const querystring = require('qs');
const expressAsyncHandler = require('express-async-handler');

function sortObject(obj) {
    let sorted = {};
    let str = [];
    let key;
    for (key in obj) {
        if (obj.hasOwnProperty(key)) {
            str.push(encodeURIComponent(key));
        }
    }
    str.sort();
    for (key = 0; key < str.length; key++) {
        sorted[str[key]] = encodeURIComponent(obj[str[key]]).replace(/%20/g, "+");
    }
    return sorted;
}

class PaymentController {
    payment = expressAsyncHandler(async (req, res) => {
        process.env.TZ = 'Asia/Ho_Chi_Minh';
        const userId = req.user.userId;
        let date = new Date();
        let createDate = moment(date).format('YYYYMMDDHHmmss');
        
        let ipAddr = req.headers['x-forwarded-for'] ||
            req.connection.remoteAddress ||
            req.socket.remoteAddress;
    
        let tmnCode = "KPDLNUZ4";
        let secretKey = "GAIMCPPOYADDC1BB5W65MV7VW99C797T";
        let vnpUrl = "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html";
        let returnUrl = 'http://localhost:8000/api/payment/returnUrl';
        let productId = req.query.productId;
        let amount = parseInt(req.query.amount, 0);
        let bankCode = req.params?.bankCode;
        
        let locale = req.body.language || 'vn';
        if (locale === null || locale === '') {
            locale = 'vn';
        }
        let currCode = 'VND';
        let vnp_Params = {};
        vnp_Params['vnp_Version'] = '2.1.0';
        vnp_Params['vnp_Command'] = 'pay';
        vnp_Params['vnp_TmnCode'] = tmnCode;
        vnp_Params['vnp_Locale'] = locale;
        vnp_Params['vnp_CurrCode'] = currCode;
        vnp_Params['vnp_TxnRef'] = productId + "_" + userId + "_" + Date.now();
        vnp_Params['vnp_OrderInfo'] = 'Thanh toan cho ma GD:' + productId;
        vnp_Params['vnp_OrderType'] = 'other';
        vnp_Params['vnp_Amount'] = amount * 100;
        vnp_Params['vnp_ReturnUrl'] = returnUrl;
        vnp_Params['vnp_IpAddr'] = ipAddr;
        vnp_Params['vnp_CreateDate'] = createDate;

        if (bankCode !== null && bankCode !== '') {
            vnp_Params['vnp_BankCode'] = "VNBANK";
        }

        vnp_Params = sortObject(vnp_Params);
        let signData = querystring.stringify(vnp_Params, { encode: false });
        let hmac = crypto.createHmac("sha512", secretKey);
        let signed = hmac.update(Buffer.from(signData, 'utf-8')).digest("hex");
        vnp_Params['vnp_SecureHash'] = signed;
        vnpUrl += '?' + querystring.stringify(vnp_Params, { encode: false });
    
        res.json({ url: vnpUrl || "" });
    });

    getReturnUrl = expressAsyncHandler(async (req, res) => {
        let vnp_Params = req.query;
        let secureHash = vnp_Params['vnp_SecureHash'];

        delete vnp_Params['vnp_SecureHash'];
        delete vnp_Params['vnp_SecureHashType'];
    
        vnp_Params = sortObject(vnp_Params);
        let tmnCode = vnp_TmnCode;
        let secretKey = vnp_HashSecret;
    
        let signData = querystring.stringify(vnp_Params, { encode: false });
        let hmac = crypto.createHmac("sha512", secretKey);
        let signed = hmac.update(Buffer.from(signData, 'utf-8')).digest("hex");
        
        if (secureHash === signed) {
            // Kiem tra xem du lieu trong db co hop le hay khong va thong bao ket qua
            const vnp_TxnRef = req.query.vnp_TxnRef || "";
            const cost = parseInt(req.query.vnp_Amount, 0);
            const [productId, userId] = vnp_TxnRef.split("_");
            const pay = await Payment.create({
                userId:req.user.userId,
                productId:req.body.productId,
                amount:req.body.amount,
            })
            return res.json(pay)
            
            
        } else {
            res.render('success', { code: '97' });
        }
        res.send("Ok");
    });
}

module.exports = new PaymentController();
